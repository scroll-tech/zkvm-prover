use std::env;

use openvm_sdk::{Sdk, commit::AppExecutionCommit};
use openvm_stark_sdk::{openvm_stark_backend::p3_field::PrimeField32, p3_baby_bear::BabyBear};
use snark_verifier_sdk::snark_verifier::loader::halo2::halo2_ecc::halo2_base::halo2_proofs::halo2curves::bn256::Fr;

mod verifier;
use verifier::dump_verifier;

mod builder;

fn write_commitments(commitments: [[u32; 8]; 2], output: &str) -> eyre::Result<()> {
    let content = format!(
        "//! Generated by crates/build-guest. DO NOT OVERWRITE!\n\npub const EXE_COMMIT: [u32; 8] = {:?};\npub const LEAF_COMMIT: [u32; 8] = {:?};\n",
        commitments[0], commitments[1],
    );
    std::fs::write(output, content)?;
    Ok(())
}

fn compress_commitment(commitment: &[u32; 8]) -> Fr {
    let order = Fr::from(BabyBear::ORDER_U32 as u64);
    let mut base = Fr::one();
    let mut ret = Fr::zero();

    for v in commitment {
        ret += Fr::from(*v as u64) * base;
        base *= order;
    }

    ret
}

#[derive(Debug)]
pub(crate) struct BuildConfig {
    pub(crate) features: Vec<String>,
    pub(crate) filename_suffix: String,
}

pub fn main() -> eyre::Result<()> {
    // cwd to manifest_dir
    env::set_current_dir(env::var("CARGO_MANIFEST_DIR")?)?;

    // dump root_verifier in workspace directory.
    let dir_workspace = {
        let dir_workspace = cargo_metadata::MetadataCommand::new()
            .exec()?
            .workspace_root;
        let root_verifier = format!("{dir_workspace}/crates/build-guest/root_verifier.asm");
        dump_verifier(&root_verifier);
        dir_workspace
    };

    let project_names_var = env::var("BUILD_PROJECT");
    let project_names = project_names_var
        .as_ref()
        .map(|s| s.split(',').collect::<Vec<_>>())
        .unwrap_or_else(|_| vec!["chunk", "batch", "bundle"]);

    println!("[BUILD-GUEST] projects={:#?}", project_names);

    for (idx, &project_name) in project_names.iter().enumerate() {
        let dir_project = format!("{dir_workspace}/crates/circuits/{project_name}-circuit");
        let build_configs = match project_name {
            "chunk" => vec![
                BuildConfig {
                    features: vec![],
                    filename_suffix: "_rv32".to_string(),
                },
                BuildConfig {
                    features: vec!["openvm".to_string()],
                    filename_suffix: "".to_string(),
                },
            ],
            "batch" => vec![BuildConfig {
                features: vec![],
                filename_suffix: "".to_string(),
            }],
            "bundle" => vec![
                BuildConfig {
                    features: vec![],
                    filename_suffix: "_euclidv1".to_string(),
                },
                BuildConfig {
                    features: vec!["euclidv2".to_string()],
                    filename_suffix: "".to_string(),
                },
            ],
            _ => unreachable!("[BUILD-GUEST] unsupported project name: {project_name}"),
        };

        for build_config in build_configs {
            println!(
                "[BUILD-GUEST] START build project={project_name} with build-config={build_config:?}"
            );
            let start_time = std::time::Instant::now();

            let commitments = {
                let fd_app_exe = format!("app{}.vmexe", build_config.filename_suffix);
                let elf = builder::build(&dir_project, &build_config.features)?;
                let (_, app_config, _, app_exe) =
                    builder::transpile(&dir_project, elf, Some(fd_app_exe.as_str()))?;
                let app_pk = Sdk::new().app_keygen(app_config)?;
                let app_committed_exe =
                    Sdk::new().commit_app_exe(app_pk.app_fri_params(), app_exe)?;

                let commits = AppExecutionCommit::compute(
                    &app_pk.app_vm_pk.vm_config,
                    &app_committed_exe,
                    &app_pk.leaf_committed_exe,
                );

                [
                    commits.exe_commit.map(|x| x.as_canonical_u32()),
                    commits
                        .leaf_vm_verifier_commit
                        .map(|x| x.as_canonical_u32()),
                ]
            };

            // write commitments to scroll-zkvm-prover
            {
                let filename = format!(
                    "{dir_workspace}/crates/prover/src/commitments/{project_name}{}.rs",
                    build_config.filename_suffix,
                );
                write_commitments(commitments, &filename)?;
            }

            // write commitments to scroll-zkvm-verifier
            {
                let filename = format!(
                    "{dir_workspace}/crates/verifier/src/commitments/{project_name}{}.rs",
                    build_config.filename_suffix,
                );
                write_commitments(commitments, &filename)?;
            }

            // write child commitments to parent circuit
            if let Some(parent) = project_names.get(idx + 1) {
                let child_commitment_file = format!(
                    "{dir_workspace}/crates/circuits/{}-circuit/src/child_commitments{}.rs",
                    parent, build_config.filename_suffix,
                );
                write_commitments(commitments, &child_commitment_file)?;
            }

            // write digests
            if project_name == "bundle" {
                let digest_1 = compress_commitment(&commitments[0])
                    .to_bytes()
                    .into_iter()
                    .rev()
                    .collect::<Vec<u8>>();
                let filename = format!(
                    "{dir_workspace}/crates/circuits/bundle-circuit/digest_1{}",
                    build_config.filename_suffix,
                );
                std::fs::write(&filename, &digest_1)?;

                let digest_2 = compress_commitment(&commitments[1])
                    .to_bytes()
                    .into_iter()
                    .rev()
                    .collect::<Vec<u8>>();
                let filename = format!(
                    "{dir_workspace}/crates/circuits/bundle-circuit/digest_2{}",
                    build_config.filename_suffix,
                );
                std::fs::write(&filename, &digest_2)?;
            }

            println!(
                "[BUILD-GUEST] OK build project={project_name} with build-config={build_config:?} in time={:?}",
                start_time.elapsed(),
            );
        }
    }

    println!("[BUILD-GUEST] OK");

    Ok(())
}
