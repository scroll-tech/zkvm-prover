use openvm_sdk::{Sdk, commit::AppExecutionCommit};

mod verifier;
use verifier::dump_verifier;
mod builder;

fn write_commitments(commitments: [[u32; 8]; 2], output: &str) {
    let content = format!(
        "//! Generated by crates/build-guest. DO NOT OVERWRITE!\n\npub const EXE_COMMIT: [u32; 8] = {:?};\npub const LEAF_COMMIT: [u32; 8] = {:?};\n",
        commitments[0], commitments[1],
    );
    std::fs::write(output, content).unwrap();
}

pub fn main() {
    // change cwd to manifest_dir
    let manifest_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap();
    std::env::set_current_dir(manifest_dir).unwrap();

    let metadata = cargo_metadata::MetadataCommand::new().exec().unwrap();
    let workspace_dir = metadata.workspace_root;

    let root_verifier = format!("{workspace_dir}/crates/build-guest/root_verifier.asm");
    dump_verifier(&root_verifier);

    let project_name_var = std::env::var("BUILD_PROJECT");
    let project_names = project_name_var
        .as_ref()
        .map(|s| s.split(',').collect::<Vec<_>>())
        .unwrap_or_else(|_| vec!["chunk", "batch", "bundle"]);
    println!("building projects {:?}", project_names);

    for (idx, project_name) in project_names.iter().enumerate() {
        let project_dir = format!("{workspace_dir}/crates/circuits/{project_name}-circuit");
        let elf = builder::build(&project_dir).unwrap();
        let (_app_config_path, app_config, _app_exe_path, app_exe) =
            builder::transpile(&project_dir, elf).unwrap();

        let app_pk = Sdk.app_keygen(app_config).unwrap();
        let app_committed_exe = Sdk
            .commit_app_exe(app_pk.app_fri_params(), app_exe)
            .unwrap();

        let commits = AppExecutionCommit::compute(
            &app_pk.app_vm_pk.vm_config,
            &app_committed_exe,
            &app_pk.leaf_committed_exe,
        );

        use openvm_stark_sdk::openvm_stark_backend::p3_field::PrimeField32;
        let exe_commit = commits.exe_commit.map(|x| x.as_canonical_u32());
        let leaf_commit = commits
            .leaf_vm_verifier_commit
            .map(|x| x.as_canonical_u32());
        tracing::debug!(name: "exe-commitment", raw = ?exe_commit, as_bn254 = ?commits.exe_commit_to_bn254());
        tracing::debug!(name: "leaf-commitment", raw = ?leaf_commit, as_bn254 = ?commits.app_config_commit_to_bn254());

        let commitments = [exe_commit, leaf_commit];

        let flname = if cfg!(feature = "euclidv2") {
            format!("{workspace_dir}/crates/prover/src/commitments/{project_name}.rs")
        } else {
            format!("{workspace_dir}/crates/prover/src/commitments/{project_name}_legacy.rs")
        };
        write_commitments(commitments, &flname);
        let flname = if cfg!(feature = "euclidv2") {
            format!("{workspace_dir}/crates/verifier/src/commitments/{project_name}.rs")
        } else {
            format!("{workspace_dir}/crates/verifier/src/commitments/{project_name}_legacy.rs")
        };

        write_commitments(commitments, &flname);

        if let Some(parent) = project_names.get(idx + 1) {
            let child_commitment_file = if cfg!(feature = "euclidv2") {
                format!(
                    "{workspace_dir}/crates/circuits/{}-circuit/src/child_commitments.rs",
                    parent
                )
            } else {
                format!(
                    "{workspace_dir}/crates/circuits/{}-circuit/src/child_commitments_legacy.rs",
                    parent
                )
            };

            write_commitments(commitments, &child_commitment_file);
        }
    }
}
