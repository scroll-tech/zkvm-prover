use openvm_sdk::{Sdk, commit::AppExecutionCommit};

mod verifier;
use verifier::dump_verifier;
mod builder;

fn write_commitments(commitments: [[u32; 8]; 2], output: &str) {
    let content = format!(
        "//! Generated by crates/build-guest. DO NOT OVERWRITE!\n\npub const EXE_COMMIT: [u32; 8] = {:?};\npub const LEAF_COMMIT: [u32; 8] = {:?};\n",
        commitments[0], commitments[1],
    );
    std::fs::write(output, content).unwrap();
}

#[derive(Debug)]
pub(crate) struct BuildConfig {
    pub(crate) features: Vec<String>,
    pub(crate) filename_suffix: String,
}

pub fn main() {
    // change cwd to manifest_dir
    let manifest_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap();
    std::env::set_current_dir(manifest_dir).unwrap();

    let metadata = cargo_metadata::MetadataCommand::new().exec().unwrap();
    let workspace_dir = metadata.workspace_root;

    let root_verifier = format!("{workspace_dir}/crates/build-guest/root_verifier.asm");
    dump_verifier(&root_verifier);

    let project_name_var = std::env::var("BUILD_PROJECT");
    let project_names = project_name_var
        .as_ref()
        .map(|s| s.split(',').collect::<Vec<_>>())
        .unwrap_or_else(|_| vec!["chunk", "batch", "bundle"]);
    println!("building projects {:?}", project_names);

    for (idx, project_name) in project_names.iter().enumerate() {
        let project_dir = format!("{workspace_dir}/crates/circuits/{project_name}-circuit");
        let build_configs = match *project_name {
            "chunk" => vec![
                BuildConfig {
                    features: vec![],
                    filename_suffix: "_rv32".to_string(),
                },
                BuildConfig {
                    features: vec!["openvm".to_string()],
                    filename_suffix: "".to_string(),
                },
            ],
            "batch" => vec![BuildConfig {
                features: vec![],
                filename_suffix: "".to_string(),
            }],
            "bundle" => vec![
                BuildConfig {
                    features: vec![],
                    filename_suffix: "_euclidv1".to_string(),
                },
                BuildConfig {
                    features: vec!["euclidv2".to_string()],
                    filename_suffix: "".to_string(),
                },
            ],
            _ => panic!("unknown project name: {project_name}"),
        };

        for build_config in build_configs {
            let start_time = std::time::Instant::now();
            println!("building project: {project_name} for spec {build_config:?}");
            let elf = builder::build(&project_dir, &build_config.features).unwrap();
            let fd_app_exe = format!("app{}.vmexe", build_config.filename_suffix);
            let (_app_config_path, app_config, _app_exe_path, app_exe) =
                builder::transpile(&project_dir, elf, Some(fd_app_exe.as_str())).unwrap();

            let app_pk = Sdk::new().app_keygen(app_config).unwrap();
            let app_committed_exe = Sdk::new()
                .commit_app_exe(app_pk.app_fri_params(), app_exe)
                .unwrap();

            let commits = AppExecutionCommit::compute(
                &app_pk.app_vm_pk.vm_config,
                &app_committed_exe,
                &app_pk.leaf_committed_exe,
            );

            use openvm_stark_sdk::openvm_stark_backend::p3_field::PrimeField32;
            let exe_commit = commits.exe_commit.map(|x| x.as_canonical_u32());
            let leaf_commit = commits
                .leaf_vm_verifier_commit
                .map(|x| x.as_canonical_u32());
            tracing::debug!(name: "exe-commitment", raw = ?exe_commit, as_bn254 = ?commits.exe_commit_to_bn254());
            tracing::debug!(name: "leaf-commitment", raw = ?leaf_commit, as_bn254 = ?commits.app_config_commit_to_bn254());

            let commitments = [exe_commit, leaf_commit];

            let filename_suffix = &build_config.filename_suffix;
            let flname = format!(
                "{workspace_dir}/crates/prover/src/commitments/{project_name}{filename_suffix}.rs"
            );
            write_commitments(commitments, &flname);
            let flname = format!(
                "{workspace_dir}/crates/verifier/src/commitments/{project_name}{filename_suffix}.rs"
            );

            write_commitments(commitments, &flname);

            if let Some(parent) = project_names.get(idx + 1) {
                let child_commitment_file = format!(
                    "{workspace_dir}/crates/circuits/{}-circuit/src/child_commitments{filename_suffix}.rs",
                    parent
                );

                write_commitments(commitments, &child_commitment_file);
            }
            println!(
                "finished building project: {project_name} for config {build_config:?} in {:?}",
                start_time.elapsed()
            );
        }
    }
}
