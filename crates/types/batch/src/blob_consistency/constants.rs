// Use the second G2 field in kzg setup (G2[1]),
// the value of this G2 field is:
// b5bfd7dd8cdeb128
// 843bc287230af389
// 26187075cbfbefa8
// 1009a2ce615ac53d
// 2914e5870cb452d2
// afaaab24f3499f72
// 185cbfee53492714
// 734429b7b38608e2
// 3926c911cceceac9
// a36851477ba4c60b
// 087041de621000ed
// c98edada20c1def2
// extracted from https://github.com/ethereum/c-kzg-4844/blob/81a8949f29d27d225ca74ebb4e9061bdd100560a/src/trusted_setup.txt#L4100
#[allow(dead_code)]
const KZG_G2_SETUP_BYTES_COMPRESSED: [u8; 96] = [
    0xb5, 0xbf, 0xd7, 0xdd, 0x8c, 0xde, 0xb1, 0x28, 0x84, 0x3b, 0xc2, 0x87, 0x23, 0x0a, 0xf3, 0x89,
    0x26, 0x18, 0x70, 0x75, 0xcb, 0xfb, 0xef, 0xa8, 0x10, 0x09, 0xa2, 0xce, 0x61, 0x5a, 0xc5, 0x3d,
    0x29, 0x14, 0xe5, 0x87, 0x0c, 0xb4, 0x52, 0xd2, 0xaf, 0xaa, 0xab, 0x24, 0xf3, 0x49, 0x9f, 0x72,
    0x18, 0x5c, 0xbf, 0xee, 0x53, 0x49, 0x27, 0x14, 0x73, 0x44, 0x29, 0xb7, 0xb3, 0x86, 0x08, 0xe2,
    0x39, 0x26, 0xc9, 0x11, 0xcc, 0xec, 0xea, 0xc9, 0xa3, 0x68, 0x51, 0x47, 0x7b, 0xa4, 0xc6, 0x0b,
    0x08, 0x70, 0x41, 0xde, 0x62, 0x10, 0x00, 0xed, 0xc9, 0x8e, 0xda, 0xda, 0x20, 0xc1, 0xde, 0xf2,
];
pub const KZG_G2_SETUP_BYTES: [u8; 192] = [
    0x15, 0xbf, 0xd7, 0xdd, 0x8c, 0xde, 0xb1, 0x28, 0x84, 0x3b, 0xc2, 0x87, 0x23, 0x0a, 0xf3, 0x89,
    0x26, 0x18, 0x70, 0x75, 0xcb, 0xfb, 0xef, 0xa8, 0x10, 0x09, 0xa2, 0xce, 0x61, 0x5a, 0xc5, 0x3d,
    0x29, 0x14, 0xe5, 0x87, 0x0c, 0xb4, 0x52, 0xd2, 0xaf, 0xaa, 0xab, 0x24, 0xf3, 0x49, 0x9f, 0x72,
    0x18, 0x5c, 0xbf, 0xee, 0x53, 0x49, 0x27, 0x14, 0x73, 0x44, 0x29, 0xb7, 0xb3, 0x86, 0x08, 0xe2,
    0x39, 0x26, 0xc9, 0x11, 0xcc, 0xec, 0xea, 0xc9, 0xa3, 0x68, 0x51, 0x47, 0x7b, 0xa4, 0xc6, 0x0b,
    0x08, 0x70, 0x41, 0xde, 0x62, 0x10, 0x00, 0xed, 0xc9, 0x8e, 0xda, 0xda, 0x20, 0xc1, 0xde, 0xf2,
    0x16, 0x66, 0xc5, 0x4b, 0x0a, 0x32, 0x52, 0x95, 0x03, 0x43, 0x2f, 0xca, 0xe0, 0x18, 0x1b, 0x4b,
    0xef, 0x79, 0xde, 0x09, 0xfc, 0x63, 0x67, 0x1f, 0xda, 0x5e, 0xd1, 0xba, 0x9b, 0xfa, 0x07, 0x89,
    0x94, 0x95, 0x34, 0x6f, 0x3d, 0x7a, 0xc9, 0xcd, 0x23, 0x04, 0x8e, 0xf3, 0x0d, 0x0a, 0x15, 0x4f,
    0x01, 0x43, 0x53, 0xbd, 0xb9, 0x6b, 0x62, 0x6d, 0xd7, 0xd5, 0xee, 0x85, 0x99, 0xd1, 0xfc, 0xa2,
    0x13, 0x15, 0x69, 0x49, 0x0e, 0x28, 0xde, 0x18, 0xe8, 0x24, 0x51, 0xa4, 0x96, 0xa9, 0xc9, 0x79,
    0x4c, 0xe2, 0x6d, 0x10, 0x59, 0x41, 0xf3, 0x83, 0xee, 0x68, 0x9b, 0xfb, 0xbb, 0x83, 0x2a, 0x99,
];

#[test]
fn test_g2() {
    use halo2curves_axiom::bls12_381::G2Affine;
    let p1 = G2Affine::from_compressed_be(&KZG_G2_SETUP_BYTES_COMPRESSED).unwrap();
    let p2 = G2Affine::from_uncompressed_unchecked_be(&KZG_G2_SETUP_BYTES).unwrap();
    assert_eq!(p1, p2);
}
